#!/usr/bin/perl

use lib '/usr/share/perl5/';
use experimental 'smartmatch';

my $ipv6_only = 0;
foreach my $arg (@ARGV) {
	if ($arg eq '-6') {
		$ipv6_only = 1;
	}
}

sub parse_masterlist {
	my ($file) = @_;
	die "no file $file" unless -f $file;

	open (my $fh, '<', $file) or die "Could not open $file: $!";

	my @mirrors;
	my $data;
	while (my $line = <$fh>) {
		chomp $line;
		if ($line =~ /([^:]+): (.*)/) {
			my $key = lc($1);
			my $value = $2;
			$data->{$key} = $value;
		} elsif ($line eq '') {
			push @mirrors, $data;
			$data = undef;
		} else {
			print "Malformed line: $line\n";
		}
	}

	push @mirrors, $data if $data;
	return @mirrors;
}

my $masterlist = shift;
my @mirrors = parse_masterlist($masterlist);
foreach my $mirror (@mirrors) {
	$mirror->{'url-http'} = sprintf("https://%s/%s", $mirror->{'site'}, $mirror->{'grml-http'});
	if ($mirror->{'grml-ftp'}) {
		$mirror->{'url-ftp'} = sprintf("ftp://%s/%s", $mirror->{'site'}, $mirror->{'grml-ftp'});
	}
	if ($mirror->{'grml-rsync'}) {
		$mirror->{'url-rsync'} = sprintf("rsync://%s/%s\n", $mirror->{'site'}, $mirror->{'grml-rsync'});
	}
}

my @http_urls;
foreach my $mirror (@mirrors) {
	next if $ipv6_only and $mirror->{'ipv6'} eq 'no';
	push @http_urls, $mirror->{'url-http'};
}


use Mirmon;
$m = Mirmon -> new ( '/etc/mirmon.conf' ); 

$conf  = $m->conf  ; # a Mirmon::Conf object
$state = $m->state ; # the mirmon state

use Data::Dumper;
my $mirrors;
my $regions_hash;

foreach my $url ( keys %{$state} ) { 
	next unless $url ~~ @http_urls;
	$mirror = $state -> { $url } ; # a Mirmon::Mirror object
	my ($time, $history) = split('-', $mirror->{state_history});
	my $last_state = substr($history,-1,1);
	next if $last_state eq 'f';
	my $region = $mirror->region;
	$regions_hash->{$region} = 1;
	$mirrors->{ $region } ||= [];
	push @{$mirrors->{ $region }}, $url;
}

my @regions = keys(%$regions_hash);

foreach my $region (@regions) {
	printf ("%s %s\n", uc($region), join('|', @{$mirrors->{$region}}));
}
